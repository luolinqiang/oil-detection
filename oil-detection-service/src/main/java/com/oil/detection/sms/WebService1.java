package com.oil.detection.sms;

import com.oil.detection.util.PropertyUtil;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.1.4
 * 2015-12-29T21:34:53.639+08:00
 * Generated source version: 3.1.4
 */
@WebServiceClient(name = "WebService1",
        wsdlLocation = "file:/D:/ws_idea_self/oil-detection/oil-detection-service/src/main/java/com/oil/detection/sms/webservice1.asmx",
        targetNamespace = "http://tempuri.org/")
public class WebService1 extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "WebService1");
    public final static QName WebService1Soap12 = new QName("http://tempuri.org/", "WebService1Soap12");
    public final static QName WebService1Soap = new QName("http://tempuri.org/", "WebService1Soap");

    static {
        URL url = null;
        try {
            url = new URL(PropertyUtil.getString("sms.webservice.url"));
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(WebService1.class.getName())
                    .log(java.util.logging.Level.INFO,
                            "Can not initialize the default wsdl from {0}", "file:/D:/ws_idea_self/oil-detection/oil-detection-service/src/main/java/com/oil/detection/sms/webservice1.asmx");
        }
        WSDL_LOCATION = url;
    }

    public WebService1(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public WebService1(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WebService1() {
        super(WSDL_LOCATION, SERVICE);
    }

    public WebService1(WebServiceFeature... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public WebService1(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public WebService1(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }


    /**
     * @return returns WebService1Soap
     */
    @WebEndpoint(name = "WebService1Soap12")
    public WebService1Soap getWebService1Soap12() {
        return super.getPort(WebService1Soap12, WebService1Soap.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns WebService1Soap
     */
    @WebEndpoint(name = "WebService1Soap12")
    public WebService1Soap getWebService1Soap12(WebServiceFeature... features) {
        return super.getPort(WebService1Soap12, WebService1Soap.class, features);
    }


    /**
     * @return returns WebService1Soap
     */
    @WebEndpoint(name = "WebService1Soap")
    public WebService1Soap getWebService1Soap() {
        return super.getPort(WebService1Soap, WebService1Soap.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns WebService1Soap
     */
    @WebEndpoint(name = "WebService1Soap")
    public WebService1Soap getWebService1Soap(WebServiceFeature... features) {
        return super.getPort(WebService1Soap, WebService1Soap.class, features);
    }

}
